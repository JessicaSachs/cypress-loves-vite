diff --git a/node_modules/@cypress/vite-dev-server/client/initCypressTests.js b/node_modules/@cypress/vite-dev-server/client/initCypressTests.js
new file mode 100644
index 0000000..3ac9937
--- /dev/null
+++ b/node_modules/@cypress/vite-dev-server/client/initCypressTests.js
@@ -0,0 +1,48 @@
+// This file is merged in a <script type=module> into index.html
+// it will be used to load and kick start the selected spec
+
+const supportPath = import.meta.env.__cypress_supportPath
+const originAutUrl = import.meta.env.__cypress_originAutUrl
+
+const specPath = window.location.pathname.replace(originAutUrl, '')
+
+const importsToLoad = [() => import(/* @vite-ignore */ specPath)]
+
+if (supportPath) {
+  importsToLoad.unshift(() => import(/* @vite-ignore */ supportPath))
+}
+
+const CypressInstance = window.Cypress = parent.Cypress
+
+if (!CypressInstance) {
+  throw new Error('Tests cannot run without a reference to Cypress!')
+}
+
+// load the support and spec
+CypressInstance.onSpecWindow(window, importsToLoad)
+
+// then start the test process
+CypressInstance.action('app:window:before:load', window)
+
+// Before all tests we are mounting the root element,
+// Cleaning up platform between tests is the responsibility of the specific adapter
+// because unmounting react/vue component should be done using specific framework API
+// (for devtools and to get rid of global event listeners from previous tests.)
+CypressInstance.on('test:before:run', () => {
+  // leave the error overlay alone if it exists
+  if (document.body.querySelectorAll('vite-error-overlay').length) {
+    // make the error more readable by giving it more space
+    Cypress.action('cy:viewport:changed', { viewportWidth: 1000, viewportHeight: 500 })
+
+    return
+  }
+
+  // reset the viewport to default when in normal mode
+  Cypress.action('cy:viewport:changed', {
+    viewportWidth: Cypress.config('viewportWidth'),
+    viewportHeight: Cypress.config('viewportHeight'),
+  })
+})
+
+// Make usage of node test plugins possible
+window.global = window
diff --git a/node_modules/@cypress/vite-dev-server/dist/index.d.ts b/node_modules/@cypress/vite-dev-server/dist/index.d.ts
index 47faab6..3feab2d 100644
--- a/node_modules/@cypress/vite-dev-server/dist/index.d.ts
+++ b/node_modules/@cypress/vite-dev-server/dist/index.d.ts
@@ -1,20 +1,9 @@
 /// <reference types="node" />
-import { EventEmitter } from 'events';
-import { UserConfig } from 'vite';
 import { Server } from 'http';
-interface Options {
-    specs: any[];
-    config: Record<string, string>;
-    devServerEvents: EventEmitter;
-    [key: string]: unknown;
-}
-export interface StartDevServer {
-    options: Options;
-    viteConfig?: UserConfig;
-}
+import { StartDevServer } from './startServer';
+export { StartDevServer };
 export interface ResolvedDevServerConfig {
     port: number;
     server: Server;
 }
 export declare function startDevServer(startDevServerArgs: StartDevServer): Promise<ResolvedDevServerConfig>;
-export {};
diff --git a/node_modules/@cypress/vite-dev-server/dist/index.js b/node_modules/@cypress/vite-dev-server/dist/index.js
index 9e2a562..453e9c2 100644
--- a/node_modules/@cypress/vite-dev-server/dist/index.js
+++ b/node_modules/@cypress/vite-dev-server/dist/index.js
@@ -1,26 +1,13 @@
 "use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 Object.defineProperty(exports, "__esModule", { value: true });
 const debug_1 = require("debug");
 const startServer_1 = require("./startServer");
 const debug = debug_1.debug('cypress:vite-dev-server:vite');
-function startDevServer(startDevServerArgs) {
-    return __awaiter(this, void 0, void 0, function* () {
-        const viteDevServer = yield startServer_1.start(startDevServerArgs);
-        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
-            const app = yield viteDevServer.listen();
-            const port = app.config.server.port;
-            debug('Component testing vite server started on port', port);
-            resolve({ port, server: app.httpServer });
-        }));
-    });
+async function startDevServer(startDevServerArgs) {
+    const viteDevServer = await startServer_1.start(startDevServerArgs);
+    const app = await viteDevServer.listen();
+    const port = app.config.server.port;
+    debug('Component testing vite server started on port', port);
+    return { port, server: app.httpServer };
 }
 exports.startDevServer = startDevServer;
diff --git a/node_modules/@cypress/vite-dev-server/dist/makeCypressPlugin.d.ts b/node_modules/@cypress/vite-dev-server/dist/makeCypressPlugin.d.ts
index c749bf7..9c04a10 100644
--- a/node_modules/@cypress/vite-dev-server/dist/makeCypressPlugin.d.ts
+++ b/node_modules/@cypress/vite-dev-server/dist/makeCypressPlugin.d.ts
@@ -1,4 +1,3 @@
-/// <reference types="node" />
-import { EventEmitter } from 'events';
+/// <reference types="cypress" />
 import { Plugin } from 'vite';
 export declare const makeCypressPlugin: (projectRoot: string, supportFilePath: string, devServerEvents: EventEmitter) => Plugin;
diff --git a/node_modules/@cypress/vite-dev-server/dist/makeCypressPlugin.js b/node_modules/@cypress/vite-dev-server/dist/makeCypressPlugin.js
index db70126..07b4db9 100644
--- a/node_modules/@cypress/vite-dev-server/dist/makeCypressPlugin.js
+++ b/node_modules/@cypress/vite-dev-server/dist/makeCypressPlugin.js
@@ -2,24 +2,43 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 const path_1 = require("path");
 const fs_1 = require("fs");
-const mustache_1 = require("mustache");
+const util_1 = require("util");
+const read = util_1.promisify(fs_1.readFile);
 const pluginName = 'cypress-transform-html';
-const indexHtmlPath = path_1.resolve(__dirname, '../index-template.html');
-const readIndexHtml = () => fs_1.readFileSync(indexHtmlPath).toString();
-function handleIndex(indexHtml, projectRoot, supportFilePath, req, res) {
-    const specPath = `/${req.headers.__cypress_spec_path}`;
-    const supportPath = supportFilePath ? `/${path_1.relative(projectRoot, supportFilePath)}` : null;
-    res.end(mustache_1.render(indexHtml, { supportPath, specPath }));
-}
+const INIT_FILEPATH = path_1.resolve(__dirname, '../client/initCypressTests.js');
 exports.makeCypressPlugin = (projectRoot, supportFilePath, devServerEvents) => {
+    let base = '/';
     return {
         name: pluginName,
         enforce: 'pre',
-        configureServer: (server) => {
-            const indexHtml = readIndexHtml();
-            server.middlewares.use('/index.html', (req, res) => handleIndex(indexHtml, projectRoot, supportFilePath, req, res));
+        config(_, env) {
+            if (env) {
+                return {
+                    define: {
+                        'import.meta.env.__cypress_supportPath': JSON.stringify(supportFilePath ? path_1.resolve(projectRoot, supportFilePath) : undefined),
+                        'import.meta.env.__cypress_originAutUrl': JSON.stringify('__cypress/iframes/'),
+                    },
+                };
+            }
+        },
+        configResolved(config) {
+            base = config.base;
+        },
+        transformIndexHtml() {
+            return [
+                {
+                    tag: 'script',
+                    attrs: { type: 'module', src: INIT_FILEPATH },
+                },
+            ];
+        },
+        configureServer: async (server) => {
+            const indexHtml = await read(path_1.resolve(__dirname, '..', 'index.html'), { encoding: 'utf8' });
+            const transformedIndexHtml = await server.transformIndexHtml(base, indexHtml);
+            server.middlewares.use(`${base}index.html`, (req, res) => res.end(transformedIndexHtml));
         },
         handleHotUpdate: () => {
+            // restart tests when code is updated
             devServerEvents.emit('dev-server:compile:success');
             return [];
         },
diff --git a/node_modules/@cypress/vite-dev-server/dist/makeHtmlPlugin.d.ts b/node_modules/@cypress/vite-dev-server/dist/makeHtmlPlugin.d.ts
deleted file mode 100644
index 71d00f8..0000000
--- a/node_modules/@cypress/vite-dev-server/dist/makeHtmlPlugin.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-import { Plugin } from 'vite';
-export declare const makeHtmlPlugin: (projectRoot: string, supportFilePath: string) => Plugin;
diff --git a/node_modules/@cypress/vite-dev-server/dist/makeHtmlPlugin.js b/node_modules/@cypress/vite-dev-server/dist/makeHtmlPlugin.js
deleted file mode 100644
index b9c4560..0000000
--- a/node_modules/@cypress/vite-dev-server/dist/makeHtmlPlugin.js
+++ /dev/null
@@ -1,23 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-const path_1 = require("path");
-const fs_1 = require("fs");
-const mustache_1 = require("mustache");
-const pluginName = 'cypress-transform-html';
-const indexHtmlPath = path_1.resolve(__dirname, '../index-template.html');
-const readIndexHtml = () => fs_1.readFileSync(indexHtmlPath).toString();
-function handleIndex(indexHtml, projectRoot, supportFilePath, req, res) {
-    const specPath = `/${req.headers.__cypress_spec_path}`;
-    const supportPath = supportFilePath ? `/${path_1.relative(projectRoot, supportFilePath)}` : null;
-    res.end(mustache_1.render(indexHtml, { supportPath, specPath }));
-}
-exports.makeHtmlPlugin = (projectRoot, supportFilePath) => {
-    return {
-        name: pluginName,
-        enforce: 'pre',
-        configureServer: (server) => {
-            const indexHtml = readIndexHtml();
-            server.middlewares.use('/index.html', (req, res) => handleIndex(indexHtml, projectRoot, supportFilePath, req, res));
-        },
-    };
-};
diff --git a/node_modules/@cypress/vite-dev-server/dist/startServer.d.ts b/node_modules/@cypress/vite-dev-server/dist/startServer.d.ts
index bc13908..e47b8c3 100644
--- a/node_modules/@cypress/vite-dev-server/dist/startServer.d.ts
+++ b/node_modules/@cypress/vite-dev-server/dist/startServer.d.ts
@@ -1,3 +1,14 @@
-import { StartDevServer } from '.';
-import { ViteDevServer } from 'vite';
+/// <reference types="cypress" />
+import { ViteDevServer, UserConfig } from 'vite';
+interface Options {
+    specs: Cypress.Cypress['spec'][];
+    config: Record<string, string>;
+    devServerEvents: EventEmitter;
+    [key: string]: unknown;
+}
+export interface StartDevServer {
+    options: Options;
+    viteConfig?: UserConfig;
+}
 export declare function start(devServerOptions: StartDevServer): Promise<ViteDevServer>;
+export {};
diff --git a/node_modules/@cypress/vite-dev-server/dist/startServer.js b/node_modules/@cypress/vite-dev-server/dist/startServer.js
index e5cd080..7f9b458 100644
--- a/node_modules/@cypress/vite-dev-server/dist/startServer.js
+++ b/node_modules/@cypress/vite-dev-server/dist/startServer.js
@@ -1,13 +1,4 @@
 "use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
@@ -15,40 +6,37 @@ Object.defineProperty(exports, "__esModule", { value: true });
 const debug_1 = __importDefault(require("debug"));
 const vite_1 = require("vite");
 const path_1 = require("path");
+const get_port_1 = __importDefault(require("get-port"));
 const makeCypressPlugin_1 = require("./makeCypressPlugin");
 const debug = debug_1.default('cypress:vite-dev-server:start');
-// TODO: Pull in types for Options so we can infer these
-const serverConfig = (projectRoot, supportFilePath, devServerEvents) => {
-    return {
-        root: path_1.resolve(__dirname, projectRoot),
-        base: '/__cypress/src/',
-        plugins: [makeCypressPlugin_1.makeCypressPlugin(projectRoot, supportFilePath, devServerEvents)],
-        server: {
-            port: 0,
-        },
-    };
-};
-const resolveServerConfig = ({ viteConfig, options }) => {
-    const defaultServerConfig = serverConfig(options.config.projectRoot, options.config.supportFile, options.devServerEvents);
+const resolveServerConfig = async ({ viteConfig, options }) => {
+    const { projectRoot, supportFile } = options.config;
     const requiredOptions = {
-        base: defaultServerConfig.base,
-        root: defaultServerConfig.root,
+        base: '/__cypress/src/',
+        root: projectRoot,
     };
-    const finalConfig = Object.assign(Object.assign(Object.assign({}, defaultServerConfig), viteConfig), requiredOptions);
-    finalConfig.plugins = [...(viteConfig.plugins || []), defaultServerConfig.plugins[0]];
-    finalConfig.server.port = defaultServerConfig.server.port;
-    debug(`the resolved server config is ${JSON.stringify(finalConfig, null, 2)}`);
+    const finalConfig = { ...viteConfig, ...requiredOptions };
+    finalConfig.plugins = [...(viteConfig.plugins || []), makeCypressPlugin_1.makeCypressPlugin(projectRoot, supportFile, options.devServerEvents)];
+    // This alias is necessary to avoid a "prefixIdentifiers" issue from slots mounting
+    // only cjs compiler-core accepts using prefixIdentifiers in slots which vue test utils use.
+    // Could we resolve this usage in test-utils?
+    finalConfig.resolve = finalConfig.resolve || {};
+    finalConfig.resolve.alias = {
+        ...finalConfig.resolve.alias,
+        '@vue/compiler-core': path_1.resolve(path_1.dirname(require.resolve('@vue/compiler-core')), 'dist', 'compiler-core.cjs.js'),
+    },
+        finalConfig.server = finalConfig.server || {};
+    finalConfig.server.port = await get_port_1.default({ port: 3000, host: 'localhost' }),
+        debug(`the resolved server config is ${JSON.stringify(finalConfig, null, 2)}`);
     return finalConfig;
 };
-function start(devServerOptions) {
-    return __awaiter(this, void 0, void 0, function* () {
-        if (!devServerOptions.viteConfig) {
-            debug('User did not pass in any Vite dev server configuration');
-            devServerOptions.viteConfig = {};
-        }
-        debug('starting vite dev server');
-        const resolvedConfig = resolveServerConfig(devServerOptions);
-        return vite_1.createServer(resolvedConfig);
-    });
+async function start(devServerOptions) {
+    if (!devServerOptions.viteConfig) {
+        debug('User did not pass in any Vite dev server configuration');
+        devServerOptions.viteConfig = {};
+    }
+    debug('starting vite dev server');
+    const resolvedConfig = await resolveServerConfig(devServerOptions);
+    return vite_1.createServer(resolvedConfig);
 }
 exports.start = start;
diff --git a/node_modules/@cypress/vite-dev-server/index-template.html b/node_modules/@cypress/vite-dev-server/index-template.html
deleted file mode 100644
index d08afce..0000000
--- a/node_modules/@cypress/vite-dev-server/index-template.html
+++ /dev/null
@@ -1,69 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-  <head>
-    <meta charset="utf-8">
-    <meta http-equiv="X-UA-Compatible" content="IE=edge">
-    <meta name="viewport" content="width=device-width,initial-scale=1.0">
-    <title>Components App</title>
-  </head>
-  <body>
-    <div id="app"></div>
-    <script type="module">
-
-    function appendTargetIfNotExists (id, tag = 'div', parent = document.body) {
-      let node = document.getElementById(id)
-
-      if (!node) {
-        node = document.createElement(tag)
-        node.setAttribute('id', id)
-        parent.appendChild(node)
-      }
-
-      node.innerHTML = ''
-
-      return node
-    }
-
-    const specPath = "{{{specPath}}}"
-
-      let importsToLoad = [() => import(specPath).catch(e => {
-        // if the import failed, it might be because of dependencies 
-        // so we try a quick refresh just in case it is
-        
-        // Since vite does not work with IE we can use URLSearchParams without polyfill
-        const searchParams = new URLSearchParams(window.location.search);
-        const r = searchParams.has("refresh") ? parseInt(searchParams.get("refresh"), 10) + 1 : 0 
-        // limit the number of refresh (dependency discovery depths) 
-        // to 2 instead of 1 for React-DOM
-        if (r < 2) {
-          searchParams.set('refresh', r)
-          window.location.search = searchParams
-        } else {
-          throw new Error(`
-      **Error during compilation.**
- Check the terminal log for more info
-`, e)
-       }
-      })];
-      if ("{{{supportPath}}}") {
-        importsToLoad.push(() => import("{{{supportPath}}}"));
-      }
-
-      const Cypress = window.Cypress = parent.Cypress
-
-      if (!Cypress) {
-        throw new Error('Tests cannot run without a reference to Cypress!')
-      }
-
-      Cypress.onSpecWindow(window, importsToLoad)
-      Cypress.action('app:window:before:load', window)
-
-      before(() => {
-        const root = appendTargetIfNotExists('__cy_root')
-
-        root.appendChild(appendTargetIfNotExists('__cy_app'))
-      })
-
-    </script>
-  </body>
-</html>
diff --git a/node_modules/@cypress/vite-dev-server/index.html b/node_modules/@cypress/vite-dev-server/index.html
new file mode 100644
index 0000000..6e49950
--- /dev/null
+++ b/node_modules/@cypress/vite-dev-server/index.html
@@ -0,0 +1,15 @@
+<!DOCTYPE html>
+<html lang="en">
+
+<head>
+  <meta charset="utf-8">
+  <meta http-equiv="X-UA-Compatible" content="IE=edge">
+  <meta name="viewport" content="width=device-width,initial-scale=1.0">
+  <title>AUT Frame</title>
+</head>
+
+<body>
+  <div id="__cy_root"></div>
+</body>
+
+</html>
\ No newline at end of file
